This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
LICENSE
readme.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# SENSITIVE DATA - NEVER COMMIT THESE
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
*.env
.env.*
!.env.example

# AWS Credentials and Config
.aws/
aws-credentials.json
terraform.tfvars
*.pem
*.key

# Database
*.db
*.sqlite
*.sqlite3

# =============================================================================
# PYTHON / FASTAPI BACKEND
# =============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff (just in case):
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pdm
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# =============================================================================
# NODE.JS / REACT FRONTEND
# =============================================================================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Vite build output
dist
dist-ssr
*.local

# Rollup.js default build output
dist/

# Webpack
.webpack/

# SvelteKit build / generate output
.svelte-kit

# =============================================================================
# DOCKER
# =============================================================================
# Override docker-compose files
docker-compose.override.yml

# Docker volumes
.docker/

# =============================================================================
# TERRAFORM / AWS
# =============================================================================
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
*tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# =============================================================================
# SELENIUM / WEB SCRAPING
# =============================================================================
# Chrome driver and browser downloads
chromedriver*
geckodriver*
selenium-server-standalone-*
drivers/
browser_cache/
screenshots/
downloads/

# =============================================================================
# IDE AND EDITOR FILES
# =============================================================================
# Visual Studio Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this file.
.idea/
*.iws
*.iml
*.ipr

# Vim
*~
*.swp
*.swo
*tmp

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# =============================================================================
# OPERATING SYSTEM FILES
# =============================================================================

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# =============================================================================
# PROJECT SPECIFIC
# =============================================================================
# Scraped data output
scraped_data/
export_data/
temp_data/
data_dumps/

# User uploaded files
uploads/
user_files/

# Generated fake profiles
generated_profiles/
fake_data_cache/

# Campaign execution logs
campaign_logs/
execution_results/

# Backup files
*.bak
*.backup
*.old

# Local development overrides
local_settings.py
dev_config.json

project-management/
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Jack Dolan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="readme.md">
# Miasma - Personal Data Poisoning Service

A defensive data poisoning platform that helps individuals protect their privacy by strategically introducing misleading information into commercial data broker networks.

## Project Goals

- **Privacy Protection**: Reduce the accuracy of personal data held by commercial data aggregators
- **Learning Platform**: Modern full-stack development with industry-standard tools and practices - using this as a learning side-project
- **Personal Use First**: Initially single-user (me), with potential for future expansion

## Tech Stack

### Frontend
- **React 18** - Modern component-based UI
- **Tailwind CSS** - Utility-first styling
- **Vite** - Fast build tool and dev server
- **React Query** - Server state management

### Backend
- **Python 3.11** - Core language
- **FastAPI** - High-performance async web framework
- **PostgreSQL** - Primary database for campaigns and results
- **Redis** - Caching and session management
- **SQLAlchemy** - ORM with async support

### Data Collection & Processing
- **Selenium** - Web automation and scraping
- **BeautifulSoup4** - HTML parsing, plus the website art is pretty
- **Requests** - HTTP client for APIs
- **Pandas** - Data manipulation and analysis

### Infrastructure & DevOps
- **Docker** - Containerization
- **Docker Compose** - Local development environment
- **AWS ECS** - Container orchestration
- **AWS RDS** - Managed PostgreSQL
- **AWS ElastiCache** - Managed Redis
- **GitHub Actions** - CI/CD pipeline
- **Snyk** - Security vulnerability scanning

## Architecture Overview

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   React SPA     │────│   FastAPI       │────│   PostgreSQL    │
│   (Frontend)    │    │   (Backend)     │    │   (Database)    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                              │
                       ┌──────┴──────┐
                       │    Redis    │
                       │  (Caching)  │
                       └─────────────┘
```

## Features (Planned)

### Phase 1: Core Infrastructure
- [ ] User authentication and profile management
- [ ] Data source discovery and monitoring
- [ ] Basic web scraping for personal data lookup

### Phase 2: Intelligence Gathering
- [ ] Automated scanning of major data broker sites
- [ ] Data source mapping and classification
- [ ] Personal data inventory and tracking

### Phase 3: Data Injection
- [ ] Fictitious data generation algorithms
- [ ] Automated form submission system
- [ ] Campaign management and tracking

### Phase 4: Verification & Analytics
- [ ] Success rate monitoring
- [ ] Data propagation tracking
- [ ] Effectiveness analytics dashboard

## Privacy & Legal Considerations

- **Scope Limitation**: Only targets commercial data brokers and voluntary submission sites
- **Government Exclusion**: Explicitly avoids interaction with official government sources
- **Personal Use**: Designed for individuals protecting their own data
- **Compliance**: Respects terms of service and applicable laws

## Quick Start

```bash
# Clone the repository
git clone https://github.com/jack-dolan/miasma.git
cd miasma

# Start development environment
docker-compose up -d

# Frontend development
cd frontend
npm install
npm run dev

# Backend development
cd backend
pip install -r requirements.txt
uvicorn main:app --reload
```

## Development Workflow

1. **Feature Branch**: Create feature branches from `main`
2. **Development**: Use Docker Compose for local development
3. **Testing**: Automated testing with pytest and Jest
4. **Security**: Snyk scanning in CI pipeline
5. **Deployment**: Automated deployment to AWS via GitHub Actions

## Disclaimer

This tool is designed for legitimate privacy protection purposes. Users are responsible for ensuring their use complies with all applicable laws and terms of service.
</file>

</files>
