This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.env.example
.gitignore
backend/.env.example
docker-compose.prod.yml
docker-compose.yml
frontend/.env.example
frontend/Dockerfile
frontend/index.html
frontend/nginx.conf
frontend/package.json
frontend/postcss.config.js
frontend/src/App.jsx
frontend/src/components/common/LoadingSpinner.jsx
frontend/src/components/common/Navbar.jsx
frontend/src/components/common/Sidebar.jsx
frontend/src/contexts/AuthContext.jsx
frontend/src/index.css
frontend/src/main.jsx
frontend/src/pages/AnalyticsPage.jsx
frontend/src/pages/CampaignsPage.jsx
frontend/src/pages/DashboardPage.jsx
frontend/src/pages/HomePage.jsx
frontend/src/pages/LoginPage.jsx
frontend/src/pages/LookupPage.jsx
frontend/tailwind.config.js
frontend/vite.config.js
LICENSE
readme.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# SENSITIVE DATA - NEVER COMMIT THESE
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
*.env
.env.*
!.env.example

# AWS Credentials and Config
.aws/
aws-credentials.json
terraform.tfvars
*.pem
*.key

# Database
*.db
*.sqlite
*.sqlite3

# =============================================================================
# PYTHON / FASTAPI BACKEND
# =============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff (just in case):
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pdm
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# =============================================================================
# NODE.JS / REACT FRONTEND
# =============================================================================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Vite build output
dist
dist-ssr
*.local

# Rollup.js default build output
dist/

# Webpack
.webpack/

# SvelteKit build / generate output
.svelte-kit

# =============================================================================
# DOCKER
# =============================================================================
# Override docker-compose files
docker-compose.override.yml

# Docker volumes
.docker/

# =============================================================================
# TERRAFORM / AWS
# =============================================================================
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
*tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# =============================================================================
# SELENIUM / WEB SCRAPING
# =============================================================================
# Chrome driver and browser downloads
chromedriver*
geckodriver*
selenium-server-standalone-*
drivers/
browser_cache/
screenshots/
downloads/

# =============================================================================
# IDE AND EDITOR FILES
# =============================================================================
# Visual Studio Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this file.
.idea/
*.iws
*.iml
*.ipr

# Vim
*~
*.swp
*.swo
*tmp

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# =============================================================================
# OPERATING SYSTEM FILES
# =============================================================================

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# =============================================================================
# PROJECT SPECIFIC
# =============================================================================
# Scraped data output
scraped_data/
export_data/
temp_data/
data_dumps/

# User uploaded files
uploads/
user_files/

# Generated fake profiles
generated_profiles/
fake_data_cache/

# Campaign execution logs
campaign_logs/
execution_results/

# Backup files
*.bak
*.backup
*.old

# Local development overrides
local_settings.py
dev_config.json

project-management/
repomix-output.xml
</file>

<file path="backend/.env.example">
# =============================================================================
# MIASMA BACKEND ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and fill in your actual values
# NEVER commit the actual .env file to version control

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
APP_NAME=Miasma
APP_VERSION=0.1.0
DEBUG=true
ENVIRONMENT=development

# API Configuration
API_V1_STR=/api/v1
SECRET_KEY=your-super-secret-key-change-this-in-production-minimum-32-characters
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Server Configuration
HOST=0.0.0.0
PORT=8000
RELOAD=true

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL Database
POSTGRES_SERVER=localhost
POSTGRES_PORT=5432
POSTGRES_USER=miasma_user
POSTGRES_PASSWORD=your-database-password
POSTGRES_DB=miasma_db

# Database URL (automatically constructed from above, or override)
DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}:${POSTGRES_PORT}/${POSTGRES_DB}

# Database Pool Settings
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password
REDIS_DB=0
REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}

# Cache Settings
CACHE_TTL_SECONDS=300
SESSION_TTL_SECONDS=86400

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
# CORS Settings
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:5173","http://127.0.0.1:3000","http://127.0.0.1:5173"]

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000

# Password Requirements
MIN_PASSWORD_LENGTH=8
REQUIRE_UPPERCASE=true
REQUIRE_LOWERCASE=true
REQUIRE_NUMBERS=true
REQUIRE_SPECIAL_CHARS=true

# =============================================================================
# WEB SCRAPING CONFIGURATION
# =============================================================================
# Selenium Settings
SELENIUM_HUB_URL=http://selenium:4444/wd/hub
CHROME_OPTIONS=--headless,--no-sandbox,--disable-dev-shm-usage,--disable-gpu
SELENIUM_TIMEOUT=30
PAGE_LOAD_TIMEOUT=30

# Scraping Behavior
REQUEST_DELAY_MIN=1
REQUEST_DELAY_MAX=3
MAX_RETRIES=3
CONCURRENT_SCRAPERS=2

# User Agent Settings
USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36

# =============================================================================
# DATA BROKER SITES CONFIGURATION
# =============================================================================
# Enable/Disable specific scrapers
ENABLE_WHITEPAGES=true
ENABLE_SPOKEO=true
ENABLE_TRUEPEOPLESEARCH=true
ENABLE_BEENVERIFIED=true
ENABLE_INTELIUS=false

# Scraper-specific settings (add API keys if available)
WHITEPAGES_API_KEY=your-whitepages-api-key-if-available
SPOKEO_API_KEY=your-spokeo-api-key-if-available

# =============================================================================
# DATA GENERATION SETTINGS
# =============================================================================
# Fake Data Generation
FAKER_LOCALE=en_US
GENERATE_REALISTIC_ADDRESSES=true
USE_REAL_ZIPCODES=true
AVOID_OBVIOUS_FAKE_NAMES=true

# Campaign Settings
MAX_CAMPAIGNS_PER_USER=10
MAX_SUBMISSIONS_PER_CAMPAIGN=100
CAMPAIGN_EXECUTION_DELAY_HOURS=24

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s
LOG_FILE=logs/miasma.log
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=5

# Enable specific loggers
LOG_DATABASE=false
LOG_SCRAPERS=true
LOG_CAMPAIGNS=true
LOG_SECURITY=true

# =============================================================================
# AWS CONFIGURATION (for production)
# =============================================================================
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key

# S3 Configuration (for file storage)
S3_BUCKET=miasma-data-bucket
S3_REGION=us-east-1

# SES Configuration (for email notifications)
SES_SENDER_EMAIL=noreply@yourdomain.com
SES_REGION=us-east-1

# =============================================================================
# MONITORING & ANALYTICS
# =============================================================================
# Enable monitoring
ENABLE_METRICS=true
METRICS_PORT=8001

# External monitoring services
SENTRY_DSN=your-sentry-dsn-for-error-tracking

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================
# Only used in development
DEV_SEED_DATA=true
DEV_MOCK_SCRAPERS=false
DEV_BYPASS_RATE_LIMITS=true

# Testing
TEST_DATABASE_URL=postgresql+asyncpg://test_user:test_pass@localhost:5432/miasma_test
PYTEST_TIMEOUT=30
</file>

<file path="frontend/index.html">
<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/miasma-icon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Personal Data Privacy Protection Service" />
    <meta name="theme-color" content="#0ea5e9" />
    
    <!-- Preconnect to Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Inter font for clean, modern UI -->
    <link 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" 
      rel="stylesheet" 
    />
    
    <!-- JetBrains Mono for code/technical content -->
    <link 
      href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap" 
      rel="stylesheet" 
    />
    
    <title>Miasma - Data Privacy Protection</title>
    
    <!-- Prevent FOUC (Flash of Unstyled Content) -->
    <style>
      body { 
        visibility: hidden; 
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
      }
      body.loaded { 
        visibility: visible; 
        opacity: 1; 
      }
    </style>
  </head>
  <body class="bg-gray-950 text-gray-100 antialiased">
    <div id="root"></div>
    
    <!-- Show body after React has mounted -->
    <script>
      window.addEventListener('load', () => {
        document.body.classList.add('loaded');
      });
    </script>
    
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="frontend/nginx.conf">
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    server {
        listen 3000;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Handle React Router
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Static assets with long cache
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # API proxy (if needed)
        location /api/ {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
</file>

<file path="frontend/src/components/common/LoadingSpinner.jsx">
import { clsx } from 'clsx'

export default function LoadingSpinner({ size = 'md', className = '' }) {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12'
  }

  return (
    <div className={clsx('spinner', sizeClasses[size], className)} />
  )
}
</file>

<file path="frontend/src/components/common/Navbar.jsx">
import { Menu, Bell, User, LogOut } from 'lucide-react'
import { useState, useRef, useEffect } from 'react'
import { useAuth } from '../../contexts/AuthContext'

export default function Navbar({ onMenuClick }) {
  const [userMenuOpen, setUserMenuOpen] = useState(false)
  const { user, logout } = useAuth()
  const userMenuRef = useRef(null)

  // Close user menu when clicking outside
  useEffect(() => {
    function handleClickOutside(event) {
      if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {
        setUserMenuOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const handleLogout = async () => {
    try {
      await logout()
      setUserMenuOpen(false)
    } catch (error) {
      console.error('Logout failed:', error)
    }
  }

  return (
    <header className="bg-gray-900 border-b border-gray-700 shadow-sm">
      <div className="flex justify-between items-center px-6 py-4">
        {/* Left side - Menu button and breadcrumbs */}
        <div className="flex items-center space-x-4">
          <button
            onClick={onMenuClick}
            className="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-300 hover:bg-gray-800 transition-colors"
          >
            <Menu className="h-6 w-6" />
          </button>
          
          {/* You can add breadcrumbs here */}
          <div className="hidden sm:block">
            <h1 className="text-xl font-semibold text-gray-100">Dashboard</h1>
          </div>
        </div>

        {/* Right side - Notifications and user menu */}
        <div className="flex items-center space-x-4">
          {/* Notifications */}
          <button className="p-2 text-gray-400 hover:text-gray-300 transition-colors relative">
            <Bell className="h-6 w-6" />
            {/* Notification badge */}
            <span className="absolute top-0 right-0 h-3 w-3 bg-red-500 rounded-full"></span>
          </button>

          {/* User menu */}
          <div className="relative" ref={userMenuRef}>
            <button
              onClick={() => setUserMenuOpen(!userMenuOpen)}
              className="flex items-center space-x-3 p-2 rounded-md text-gray-400 hover:text-gray-300 hover:bg-gray-800 transition-colors"
            >
              <div className="w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center">
                <User className="h-5 w-5 text-white" />
              </div>
              <span className="hidden md:block text-sm font-medium text-gray-300">
                {user?.name || user?.email}
              </span>
            </button>

            {/* Dropdown menu */}
            {userMenuOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-gray-800 rounded-md shadow-lg border border-gray-700 z-50">
                <div className="py-1">
                  <div className="px-4 py-2 border-b border-gray-700">
                    <p className="text-sm font-medium text-gray-300">{user?.name}</p>
                    <p className="text-xs text-gray-400">{user?.email}</p>
                  </div>
                  
                  <button className="flex items-center w-full px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 transition-colors">
                    <User className="h-4 w-4 mr-3" />
                    Profile
                  </button>
                  
                  <button 
                    onClick={handleLogout}
                    className="flex items-center w-full px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 transition-colors"
                  >
                    <LogOut className="h-4 w-4 mr-3" />
                    Sign out
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  )
}
</file>

<file path="frontend/src/components/common/Sidebar.jsx">
import { Link, useLocation } from 'react-router-dom'
import { X, Shield, Home, Search, Zap, BarChart3 } from 'lucide-react'
import { clsx } from 'clsx'

const navigation = [
  { name: 'Dashboard', href: '/dashboard', icon: Home },
  { name: 'Data Lookup', href: '/lookup', icon: Search },
  { name: 'Campaigns', href: '/campaigns', icon: Zap },
  { name: 'Analytics', href: '/analytics', icon: BarChart3 },
]

export default function Sidebar({ isOpen, onClose }) {
  const location = useLocation()

  return (
    <>
      {/* Mobile overlay */}
      {isOpen && (
        <div 
          className="fixed inset-0 z-40 lg:hidden bg-gray-900/80 backdrop-blur-sm"
          onClick={onClose}
        />
      )}

      {/* Sidebar */}
      <div className={clsx(
        'fixed inset-y-0 left-0 z-50 w-64 bg-gray-900 border-r border-gray-700 transform transition-transform duration-200 ease-in-out lg:translate-x-0 lg:static lg:inset-0',
        isOpen ? 'translate-x-0' : '-translate-x-full'
      )}>
        <div className="flex flex-col h-full">
          {/* Logo */}
          <div className="flex items-center justify-between h-16 px-6 border-b border-gray-700">
            <Link to="/dashboard" className="flex items-center space-x-2">
              <Shield className="h-8 w-8 text-primary-500" />
              <span className="text-xl font-bold text-gradient">Miasma</span>
            </Link>
            <button
              onClick={onClose}
              className="lg:hidden p-1 rounded-md text-gray-400 hover:text-gray-300"
            >
              <X className="h-6 w-6" />
            </button>
          </div>

          {/* Navigation */}
          <nav className="flex-1 px-4 py-6 space-y-1">
            {navigation.map((item) => {
              const isActive = location.pathname === item.href
              return (
                <Link
                  key={item.name}
                  to={item.href}
                  className={clsx(
                    isActive ? 'nav-link-active' : 'nav-link-inactive'
                  )}
                  onClick={onClose}
                >
                  <item.icon className="mr-3 h-5 w-5" />
                  {item.name}
                </Link>
              )
            })}
          </nav>

          {/* Footer */}
          <div className="px-4 py-4 border-t border-gray-700">
            <p className="text-xs text-gray-500 text-center">
              v0.1.0 - Development Build
            </p>
          </div>
        </div>
      </div>
    </>
  )
}
</file>

<file path="frontend/src/contexts/AuthContext.jsx">
import { createContext, useContext, useState, useEffect } from 'react'
import toast from 'react-hot-toast'

const AuthContext = createContext({})

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null)
  const [isLoading, setIsLoading] = useState(true)

  // Check if user is logged in on app load
  useEffect(() => {
    checkAuth()
  }, [])

  const checkAuth = async () => {
    try {
      const token = localStorage.getItem('miasma_access_token')
      if (!token) {
        setIsLoading(false)
        return
      }

      // TODO: Verify token with backend
      // For now, just mock a user if token exists
      if (token === 'demo-token') {
        setUser({
          id: 1,
          email: 'demo@miasma.dev',
          name: 'Demo User',
          createdAt: '2025-01-01T00:00:00Z'
        })
      }
      
      setIsLoading(false)
    } catch (error) {
      console.error('Auth check failed:', error)
      localStorage.removeItem('miasma_access_token')
      setIsLoading(false)
    }
  }

  const login = async (email, password) => {
    try {
      // TODO: Replace with actual API call to backend
      // For now, mock login for development
      if (email === 'demo@miasma.dev' && password === 'demo') {
        const mockUser = {
          id: 1,
          email: 'demo@miasma.dev',
          name: 'Demo User',
          createdAt: '2025-01-01T00:00:00Z'
        }
        
        localStorage.setItem('miasma_access_token', 'demo-token')
        setUser(mockUser)
        toast.success('Successfully logged in!')
        return mockUser
      } else {
        throw new Error('Invalid credentials')
      }
    } catch (error) {
      toast.error(error.message || 'Login failed')
      throw error
    }
  }

  const logout = async () => {
    try {
      localStorage.removeItem('miasma_access_token')
      localStorage.removeItem('miasma_refresh_token')
      setUser(null)
      toast.success('Successfully logged out')
    } catch (error) {
      toast.error('Logout failed')
      throw error
    }
  }

  const value = {
    user,
    isLoading,
    login,
    logout,
    checkAuth,
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
</file>

<file path="frontend/src/pages/AnalyticsPage.jsx">
import { BarChart3, TrendingUp } from 'lucide-react'

export default function AnalyticsPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold text-gray-100">Analytics</h1>
      <div className="card p-8 text-center">
        <BarChart3 className="h-16 w-16 text-primary-500 mx-auto mb-4" />
        <h2 className="text-xl font-semibold mb-2">Campaign Analytics</h2>
        <p className="text-gray-400 mb-6">
          Track the effectiveness of your data protection campaigns with detailed metrics.
        </p>
        <button className="btn-primary">View Reports</button>
      </div>
    </div>
  )
}
</file>

<file path="frontend/src/pages/CampaignsPage.jsx">
import { Zap, Plus } from 'lucide-react'

export default function CampaignsPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-100">Campaigns</h1>
        <button className="btn-primary flex items-center">
          <Plus className="h-4 w-4 mr-2" />
          New Campaign
        </button>
      </div>
      <div className="card p-8 text-center">
        <Zap className="h-16 w-16 text-primary-500 mx-auto mb-4" />
        <h2 className="text-xl font-semibold mb-2">Data Poisoning Campaigns</h2>
        <p className="text-gray-400 mb-6">
          Create and manage strategic data injection campaigns to protect your privacy.
        </p>
        <button className="btn-primary">Create First Campaign</button>
      </div>
    </div>
  )
}
</file>

<file path="frontend/src/pages/DashboardPage.jsx">
import { Eye, Zap, Database, TrendingUp } from 'lucide-react'

export default function DashboardPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-100">Dashboard</h1>
        <button className="btn-primary">New Campaign</button>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="card p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-blue-600/20">
              <Eye className="h-6 w-6 text-blue-400" />
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-400">Data Sources Found</p>
              <p className="text-2xl font-bold text-gray-100">12</p>
            </div>
          </div>
        </div>

        <div className="card p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-green-600/20">
              <Zap className="h-6 w-6 text-green-400" />
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-400">Active Campaigns</p>
              <p className="text-2xl font-bold text-gray-100">3</p>
            </div>
          </div>
        </div>

        <div className="card p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-purple-600/20">
              <Database className="h-6 w-6 text-purple-400" />
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-400">Records Injected</p>
              <p className="text-2xl font-bold text-gray-100">247</p>
            </div>
          </div>
        </div>

        <div className="card p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-yellow-600/20">
              <TrendingUp className="h-6 w-6 text-yellow-400" />
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-400">Success Rate</p>
              <p className="text-2xl font-bold text-gray-100">84%</p>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="card">
          <div className="card-header">
            <h3 className="text-lg font-semibold text-gray-100">Recent Lookups</h3>
          </div>
          <div className="card-body">
            <div className="space-y-4">
              <div className="flex justify-between items-center py-2">
                <span className="text-gray-300">WhitePages.com</span>
                <span className="status-online">Found Data</span>
              </div>
              <div className="flex justify-between items-center py-2">
                <span className="text-gray-300">Spokeo.com</span>
                <span className="status-online">Found Data</span>
              </div>
              <div className="flex justify-between items-center py-2">
                <span className="text-gray-300">TruePeopleSearch.com</span>
                <span className="status-pending">Scanning...</span>
              </div>
            </div>
          </div>
        </div>

        <div className="card">
          <div className="card-header">
            <h3 className="text-lg font-semibold text-gray-100">Campaign Status</h3>
          </div>
          <div className="card-body">
            <div className="space-y-4">
              <div className="flex justify-between items-center py-2">
                <span className="text-gray-300">Campaign Alpha</span>
                <span className="status-online">Running</span>
              </div>
              <div className="flex justify-between items-center py-2">
                <span className="text-gray-300">Campaign Beta</span>
                <span className="status-pending">Scheduled</span>
              </div>
              <div className="flex justify-between items-center py-2">
                <span className="text-gray-300">Campaign Gamma</span>
                <span className="status-offline">Completed</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="frontend/src/pages/HomePage.jsx">
import { Link } from 'react-router-dom'
import { Shield, Eye, Database, Zap, Lock, Users } from 'lucide-react'

export default function HomePage() {
  return (
    <div className="min-h-screen bg-gray-950 text-gray-100">
      {/* Header */}
      <header className="border-b border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-2">
              <Shield className="h-8 w-8 text-primary-500" />
              <h1 className="text-2xl font-bold text-gradient">Miasma</h1>
            </div>
            <Link
              to="/login"
              className="btn-primary"
            >
              Get Started
            </Link>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto text-center">
          <h2 className="text-5xl font-bold mb-6 text-gradient">
            Protect Your Digital Privacy
          </h2>
          <p className="text-xl text-gray-300 mb-8 max-w-3xl mx-auto">
            Take control of your personal data by strategically introducing misleading 
            information into commercial data broker networks. Reduce the accuracy of 
            profiles built about you without your consent.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link to="/login" className="btn-primary btn-lg">
              Start Protecting Your Data
            </Link>
            <button className="btn-outline btn-lg">
              Learn How It Works
            </button>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8 bg-gray-900/50">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h3 className="text-3xl font-bold mb-4">How Miasma Works</h3>
            <p className="text-gray-300 max-w-2xl mx-auto">
              A comprehensive approach to data privacy through strategic information management
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <div className="card p-6 text-center">
              <Eye className="h-12 w-12 text-primary-500 mx-auto mb-4" />
              <h4 className="text-xl font-semibold mb-3">Data Discovery</h4>
              <p className="text-gray-400">
                Scan major data broker sites to see what personal information 
                is publicly available about you.
              </p>
            </div>
            
            <div className="card p-6 text-center">
              <Zap className="h-12 w-12 text-primary-500 mx-auto mb-4" />
              <h4 className="text-xl font-semibold mb-3">Strategic Injection</h4>
              <p className="text-gray-400">
                Generate realistic but false information and strategically 
                submit it to reduce data accuracy.
              </p>
            </div>
            
            <div className="card p-6 text-center">
              <Database className="h-12 w-12 text-primary-500 mx-auto mb-4" />
              <h4 className="text-xl font-semibold mb-3">Campaign Management</h4>
              <p className="text-gray-400">
                Track and manage your data poisoning campaigns with 
                detailed analytics and success metrics.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Privacy Notice */}
      <section className="py-16 px-4 sm:px-6 lg:px-8 border-t border-gray-800">
        <div className="max-w-4xl mx-auto text-center">
          <Lock className="h-12 w-12 text-primary-500 mx-auto mb-4" />
          <h3 className="text-2xl font-bold mb-4">Privacy First</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 text-left">
            <div>
              <h4 className="font-semibold mb-2 text-green-400">What We Do</h4>
              <ul className="text-gray-300 space-y-1 text-sm">
                <li>• Target only commercial data brokers</li>
                <li>• Help you protect your own data</li>
                <li>• Respect terms of service</li>
                <li>• Provide transparency in our methods</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2 text-red-400">What We Don't Do</h4>
              <ul className="text-gray-300 space-y-1 text-sm">
                <li>• Target government databases</li>
                <li>• Interfere with official records</li>
                <li>• Store your personal information</li>
                <li>• Share data with third parties</li>
              </ul>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="border-t border-gray-800 py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto text-center text-gray-400">
          <p>&copy; 2025 Miasma. Built for personal privacy protection.</p>
          <p className="text-sm mt-2">
            Use responsibly and in compliance with applicable laws.
          </p>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="frontend/src/pages/LoginPage.jsx">
import { useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { Shield, Mail, Lock, Eye, EyeOff } from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [errors, setErrors] = useState({})

  const { login } = useAuth()
  const navigate = useNavigate()

  const validateForm = () => {
    const newErrors = {}

    if (!email) {
      newErrors.email = 'Email is required'
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = 'Email is invalid'
    }

    if (!password) {
      newErrors.password = 'Password is required'
    } else if (password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateForm()) {
      return
    }

    setIsLoading(true)
    setErrors({})

    try {
      await login(email, password)
      navigate('/dashboard')
    } catch (error) {
      setErrors({ submit: error.message || 'Login failed' })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-950 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        {/* Header */}
        <div className="text-center">
          <Link to="/" className="inline-flex items-center space-x-2 mb-6">
            <Shield className="h-12 w-12 text-primary-500" />
            <h1 className="text-3xl font-bold text-gradient">Miasma</h1>
          </Link>
          <h2 className="text-2xl font-bold text-gray-100">
            Sign in to your account
          </h2>
          <p className="mt-2 text-gray-400">
            Protect your data privacy with strategic information management
          </p>
        </div>

        {/* Demo credentials info */}
        <div className="bg-blue-900/20 border border-blue-800 rounded-md p-4">
          <h3 className="text-sm font-medium text-blue-400 mb-2">Demo Credentials</h3>
          <p className="text-xs text-blue-300 mb-1">Email: demo@miasma.dev</p>
          <p className="text-xs text-blue-300">Password: demo</p>
        </div>

        {/* Login Form */}
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          {errors.submit && (
            <div className="bg-red-900/20 border border-red-800 text-red-400 px-4 py-3 rounded-md text-sm">
              {errors.submit}
            </div>
          )}

          <div className="space-y-4">
            {/* Email field */}
            <div>
              <label htmlFor="email" className="label">
                Email address
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className={`input pl-10 ${errors.email ? 'input-error' : ''}`}
                  placeholder="Enter your email"
                  disabled={isLoading}
                />
              </div>
              {errors.email && (
                <p className="error-message">{errors.email}</p>
              )}
            </div>

            {/* Password field */}
            <div>
              <label htmlFor="password" className="label">
                Password
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className={`input pl-10 pr-10 ${errors.password ? 'input-error' : ''}`}
                  placeholder="Enter your password"
                  disabled={isLoading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={isLoading}
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5 text-gray-400 hover:text-gray-300" />
                  ) : (
                    <Eye className="h-5 w-5 text-gray-400 hover:text-gray-300" />
                  )}
                </button>
              </div>
              {errors.password && (
                <p className="error-message">{errors.password}</p>
              )}
            </div>
          </div>

          {/* Remember me and forgot password */}
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                type="checkbox"
                className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-600 bg-gray-800 rounded"
              />
              <label htmlFor="remember-me" className="ml-2 text-sm text-gray-300">
                Remember me
              </label>
            </div>

            <div className="text-sm">
              <Link 
                to="/forgot-password" 
                className="text-primary-400 hover:text-primary-300 transition-colors"
              >
                Forgot your password?
              </Link>
            </div>
          </div>

          {/* Submit button */}
          <button
            type="submit"
            disabled={isLoading}
            className="w-full btn-primary btn-lg flex justify-center disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? (
              <div className="spinner h-5 w-5"></div>
            ) : (
              'Sign In'
            )}
          </button>

          {/* Back to home */}
          <div className="text-center">
            <Link 
              to="/" 
              className="text-sm text-gray-400 hover:text-gray-300 transition-colors"
            >
              ← Back to home
            </Link>
          </div>
        </form>
      </div>
    </div>
  )
}
</file>

<file path="frontend/src/pages/LookupPage.jsx">
import { Search, Globe, Database } from 'lucide-react'

export default function LookupPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold text-gray-100">Data Lookup</h1>
      <div className="card p-8 text-center">
        <Search className="h-16 w-16 text-primary-500 mx-auto mb-4" />
        <h2 className="text-xl font-semibold mb-2">Search Your Digital Footprint</h2>
        <p className="text-gray-400 mb-6">
          Scan major data broker sites to discover what personal information is publicly available about you.
        </p>
        <button className="btn-primary">Start Lookup</button>
      </div>
    </div>
  )
}
</file>

<file path=".env.example">
# =============================================================================
# MIASMA - DOCKER COMPOSE ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and fill in your actual values
# This file is used by docker-compose.yml for container configuration

# =============================================================================
# GLOBAL SETTINGS
# =============================================================================
COMPOSE_PROJECT_NAME=miasma
ENVIRONMENT=development

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
POSTGRES_SERVER=postgres
POSTGRES_PORT=5432
POSTGRES_USER=miasma_user
POSTGRES_PASSWORD=change-this-secure-password
POSTGRES_DB=miasma_db

# PostgreSQL Docker settings
POSTGRES_VERSION=15-alpine

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=change-this-redis-password
REDIS_VERSION=7-alpine

# =============================================================================
# APPLICATION PORTS
# =============================================================================
# Frontend (React)
FRONTEND_PORT=3000

# Backend (FastAPI)
BACKEND_PORT=8000

# Database (PostgreSQL)
DB_PORT=5432

# Cache (Redis)
CACHE_PORT=6379

# Selenium Hub (for web scraping)
SELENIUM_PORT=4444

# =============================================================================
# VOLUME PATHS
# =============================================================================
# Database data persistence
DB_DATA_PATH=./data/postgres

# Redis data persistence  
REDIS_DATA_PATH=./data/redis

# Application logs
LOGS_PATH=./logs

# Scraped data storage
SCRAPED_DATA_PATH=./data/scraped

# =============================================================================
# SELENIUM CONFIGURATION
# =============================================================================
SELENIUM_VERSION=4.15.0
CHROME_VERSION=latest

# Selenium scaling (for production)
SELENIUM_NODE_MAX_SESSIONS=2
SELENIUM_NODE_MAX_INSTANCES=2

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================
# Enable development features
DEV_MODE=true
DEBUG=true
HOT_RELOAD=true

# Development ports (alternative ports if main ones are in use)
DEV_FRONTEND_PORT=5173
DEV_BACKEND_PORT=8001

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
# JWT Configuration
SECRET_KEY=your-super-secret-jwt-key-minimum-32-characters-change-in-production
ALGORITHM=HS256

# CORS Origins (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173

# =============================================================================
# RESOURCE LIMITS
# =============================================================================
# Memory limits for containers (adjust based on your system)
FRONTEND_MEMORY=512m
BACKEND_MEMORY=1g
DATABASE_MEMORY=512m
REDIS_MEMORY=256m
SELENIUM_MEMORY=2g

# CPU limits
FRONTEND_CPUS=0.5
BACKEND_CPUS=1.0
DATABASE_CPUS=1.0
REDIS_CPUS=0.5
SELENIUM_CPUS=2.0

# =============================================================================
# BACKUP & MAINTENANCE
# =============================================================================
# Backup settings
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30

# Log rotation
LOG_MAX_SIZE=100m
LOG_MAX_FILES=10

# =============================================================================
# PRODUCTION OVERRIDES
# =============================================================================
# These should be set differently in production
# ENVIRONMENT=production
# DEBUG=false
# DEV_MODE=false
# HOT_RELOAD=false
# POSTGRES_PASSWORD=super-secure-production-password
# REDIS_PASSWORD=super-secure-redis-password
# SECRET_KEY=cryptographically-secure-production-key
</file>

<file path="docker-compose.prod.yml">
version: '3.8'

# Production Docker Compose Configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # =============================================================================
  # APPLICATION SERVICES (PRODUCTION OVERRIDES)
  # =============================================================================

  backend:
    build:
      target: production
    restart: always
    environment:
      # Production settings
      DEBUG: false
      ENVIRONMENT: production
      DEV_MODE: false
      HOT_RELOAD: false
      
      # Security
      BACKEND_CORS_ORIGINS: '["https://yourdomain.com","https://www.yourdomain.com"]'
      
      # Logging
      LOG_LEVEL: INFO
      
      # Performance
      DB_POOL_SIZE: 20
      DB_MAX_OVERFLOW: 40
      
      # Rate limiting
      RATE_LIMIT_PER_MINUTE: 30
      RATE_LIMIT_PER_HOUR: 500
    volumes:
      # Remove development volume mounts
      - ./logs:/app/logs
      - ./data/scraped:/app/data/scraped
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '2.0'
        reservations:
          memory: 1g
          cpus: '1.0'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  frontend:
    build:
      target: production
    restart: always
    environment:
      # Production API URLs
      VITE_API_BASE_URL: https://api.yourdomain.com
      VITE_API_URL: https://api.yourdomain.com/api/v1
      VITE_WS_URL: wss://api.yourdomain.com/ws
      
      # Production settings
      VITE_NODE_ENV: production
      VITE_ENABLE_DEBUG_MODE: false
      VITE_USE_MOCK_DATA: false
      VITE_SHOW_DEV_TOOLS: false
    volumes:
      # Remove development volume mounts
      []
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
        reservations:
          memory: 512m
          cpus: '0.5'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # =============================================================================
  # DATABASE SERVICES (PRODUCTION OVERRIDES)
  # =============================================================================

  postgres:
    restart: always
    environment:
      # Production tuning
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./backups:/backups
      - ./scripts/postgres-prod.conf:/etc/postgresql/postgresql.conf:ro
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '2.0'
        reservations:
          memory: 1g
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  redis:
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '1.0'
        reservations:
          memory: 256m
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # =============================================================================
  # SELENIUM (PRODUCTION SCALING)
  # =============================================================================

  selenium:
    restart: always
    environment:
      SE_NODE_MAX_SESSIONS: 5
      SE_NODE_MAX_INSTANCES: 5
      # Remove VNC in production
      SE_START_XVFB: false
    ports:
      # Remove VNC port in production
      - "${SELENIUM_PORT:-4444}:4444"
    deploy:
      resources:
        limits:
          memory: 4g
          cpus: '3.0'
        reservations:
          memory: 2g
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # =============================================================================
  # PRODUCTION SERVICES
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: miasma-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - miasma-network
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.5'

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: miasma-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - miasma-network
    command: ["/bin/sh", "/backup.sh"]
    profiles:
      - backup

  # Log aggregation
  fluentd:
    image: fluentd:latest
    container_name: miasma-fluentd
    restart: always
    volumes:
      - ./logs:/fluentd/log
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - miasma-network
    profiles:
      - monitoring

# =============================================================================
# PRODUCTION VOLUMES
# =============================================================================

volumes:
  postgres_data:
    external: true
    name: miasma-postgres-data
  
  redis_data:
    external: true  
    name: miasma-redis-data
</file>

<file path="docker-compose.yml">
version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:${POSTGRES_VERSION:-15-alpine}
    container_name: miasma-postgres
    restart: unless-stopped
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-miasma_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-this-secure-password}
      POSTGRES_DB: ${POSTGRES_DB:-miasma_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - miasma-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-miasma_user} -d ${POSTGRES_DB:-miasma_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${DATABASE_MEMORY:-512m}
          cpus: '${DATABASE_CPUS:-1.0}'

  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: miasma-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-change-this-redis-password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${CACHE_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - miasma-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY:-256m}
          cpus: '${REDIS_CPUS:-0.5}'

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: miasma-backend
    restart: unless-stopped
    environment:
      # Application
      APP_NAME: ${APP_NAME:-Miasma}
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-miasma_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-this-secure-password}
      POSTGRES_DB: ${POSTGRES_DB:-miasma_db}
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-miasma_user}:${POSTGRES_PASSWORD:-change-this-secure-password}@postgres:5432/${POSTGRES_DB:-miasma_db}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-change-this-redis-password}
      REDIS_URL: redis://:${REDIS_PASSWORD:-change-this-redis-password}@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-jwt-key-minimum-32-characters-change-in-production}
      ALGORITHM: ${ALGORITHM:-HS256}
      
      # CORS
      BACKEND_CORS_ORIGINS: '["http://localhost:3000","http://localhost:5173","http://127.0.0.1:3000","http://127.0.0.1:5173"]'
      
      # Selenium
      SELENIUM_HUB_URL: http://selenium:4444/wd/hub
      
      # Development
      DEV_MODE: ${DEV_MODE:-true}
      HOT_RELOAD: ${HOT_RELOAD:-true}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./data/scraped:/app/data/scraped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - miasma-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY:-1g}
          cpus: '${BACKEND_CPUS:-1.0}'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: miasma-frontend
    restart: unless-stopped
    environment:
      # Vite development server
      VITE_DEV_SERVER_HOST: 0.0.0.0
      VITE_DEV_SERVER_PORT: 3000
      
      # API Configuration
      VITE_API_BASE_URL: http://localhost:${BACKEND_PORT:-8000}
      VITE_API_URL: http://localhost:${BACKEND_PORT:-8000}/api/v1
      VITE_WS_URL: ws://localhost:${BACKEND_PORT:-8000}/ws
      
      # Development
      VITE_NODE_ENV: ${ENVIRONMENT:-development}
      VITE_ENABLE_DEBUG_MODE: ${DEBUG:-true}
      VITE_HOT_RELOAD: ${HOT_RELOAD:-true}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    depends_on:
      - backend
    networks:
      - miasma-network
    stdin_open: true
    tty: true
    deploy:
      resources:
        limits:
          memory: ${FRONTEND_MEMORY:-512m}
          cpus: '${FRONTEND_CPUS:-0.5}'

  # =============================================================================
  # WEB SCRAPING SERVICES
  # =============================================================================

  selenium:
    image: seleniarm/standalone-chromium:${SELENIUM_VERSION:-4.15.0}
    container_name: miasma-selenium
    restart: unless-stopped
    environment:
      # Selenium Hub Configuration
      SE_NODE_MAX_SESSIONS: ${SELENIUM_NODE_MAX_SESSIONS:-2}
      SE_NODE_MAX_INSTANCES: ${SELENIUM_NODE_MAX_INSTANCES:-2}
      SE_NODE_OVERRIDE_MAX_SESSIONS: true
      
      # Chrome Configuration
      SE_CHROME_OPTS: "--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1920,1080"
      
      # VNC (for debugging - remove in production)
      SE_VNC_NO_PASSWORD: 1
      SE_START_XVFB: true
    ports:
      - "${SELENIUM_PORT:-4444}:4444"
      - "7900:7900"  # VNC port for debugging
    volumes:
      - /dev/shm:/dev/shm
      - ./data/screenshots:/home/seluser/screenshots
      - ./data/downloads:/home/seluser/downloads
    networks:
      - miasma-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${SELENIUM_MEMORY:-2g}
          cpus: '${SELENIUM_CPUS:-2.0}'

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================

  adminer:
    image: adminer:latest
    container_name: miasma-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: nette
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - miasma-network
    profiles:
      - dev-tools

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: miasma-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-change-this-redis-password}
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - miasma-network
    profiles:
      - dev-tools

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DB_DATA_PATH:-./data/postgres}
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  miasma-network:
    driver: bridge
    name: miasma-network
</file>

<file path="frontend/.env.example">
# =============================================================================
# MIASMA FRONTEND ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and fill in your actual values
# NEVER commit the actual .env file to version control

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
VITE_APP_NAME=Miasma
VITE_APP_VERSION=0.1.0
VITE_APP_DESCRIPTION=Personal Data Privacy Protection Service

# Environment
VITE_NODE_ENV=development

# =============================================================================
# API CONFIGURATION
# =============================================================================
# Backend API URL
VITE_API_BASE_URL=http://localhost:8000
VITE_API_VERSION=v1

# API Endpoints
VITE_API_URL=http://localhost:8000/api/v1

# WebSocket URL (for real-time updates)
VITE_WS_URL=ws://localhost:8000/ws

# =============================================================================
# AUTHENTICATION SETTINGS
# =============================================================================
# Token storage
VITE_TOKEN_STORAGE_KEY=miasma_access_token
VITE_REFRESH_TOKEN_KEY=miasma_refresh_token

# Session settings
VITE_SESSION_TIMEOUT_MINUTES=30
VITE_AUTO_REFRESH_TOKEN=true

# =============================================================================
# FEATURE FLAGS
# =============================================================================
# Enable/disable features during development
VITE_ENABLE_REGISTRATION=true
VITE_ENABLE_PASSWORD_RESET=true
VITE_ENABLE_ANALYTICS_DASHBOARD=true
VITE_ENABLE_CAMPAIGN_CREATION=true
VITE_ENABLE_DATA_EXPORT=true

# Debug features
VITE_ENABLE_DEBUG_MODE=true
VITE_SHOW_API_RESPONSES=false
VITE_MOCK_API_CALLS=false

# =============================================================================
# UI/UX SETTINGS
# =============================================================================
# Theme settings
VITE_DEFAULT_THEME=dark
VITE_ENABLE_THEME_SWITCHER=true

# Layout settings
VITE_SIDEBAR_COLLAPSED_DEFAULT=false
VITE_ENABLE_BREADCRUMBS=true

# Data refresh intervals (in seconds)
VITE_DASHBOARD_REFRESH_INTERVAL=30
VITE_CAMPAIGN_STATUS_REFRESH=10
VITE_LOOKUP_CACHE_TTL=300

# =============================================================================
# SCRAPING & LOOKUP SETTINGS
# =============================================================================
# Default lookup settings
VITE_MAX_LOOKUP_RESULTS=50
VITE_LOOKUP_TIMEOUT_SECONDS=30
VITE_ENABLE_PARALLEL_LOOKUPS=true

# Data source display settings
VITE_SHOW_SOURCE_RELIABILITY=true
VITE_SHOW_DATA_AGE=true
VITE_GROUP_SIMILAR_RESULTS=true

# =============================================================================
# CAMPAIGN SETTINGS
# =============================================================================
# Campaign creation limits
VITE_MAX_CAMPAIGNS_PER_USER=10
VITE_MAX_DATA_POINTS_PER_CAMPAIGN=50

# Campaign execution
VITE_SHOW_REAL_TIME_PROGRESS=true
VITE_ENABLE_CAMPAIGN_SCHEDULING=true
VITE_AUTO_VERIFY_SUBMISSIONS=true

# =============================================================================
# ANALYTICS & MONITORING
# =============================================================================
# Client-side analytics
VITE_ENABLE_USAGE_ANALYTICS=false
VITE_ANALYTICS_ENDPOINT=/api/v1/analytics

# Error tracking
VITE_SENTRY_DSN=your-frontend-sentry-dsn
VITE_ENABLE_ERROR_REPORTING=true

# Performance monitoring
VITE_ENABLE_PERFORMANCE_MONITORING=true
VITE_LOG_API_RESPONSE_TIMES=false

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================
# Development server
VITE_DEV_SERVER_PORT=5173
VITE_DEV_SERVER_HOST=localhost

# Hot reload settings
VITE_HOT_RELOAD=true

# Development tools
VITE_SHOW_DEV_TOOLS=true
VITE_ENABLE_REACT_DEVTOOLS=true

# Mock data (for development without backend)
VITE_USE_MOCK_DATA=false
VITE_MOCK_DELAY_MS=500

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
# CSP Settings
VITE_CSP_ENABLED=true

# HTTPS settings (for production)
VITE_FORCE_HTTPS=false

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================
# Google Maps (if needed for address validation)
VITE_GOOGLE_MAPS_API_KEY=your-google-maps-api-key

# Stripe (if implementing paid features later)
VITE_STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key

# =============================================================================
# PRODUCTION OVERRIDES
# =============================================================================
# These will be overridden in production deployment
# VITE_API_BASE_URL=https://api.yourdomain.com
# VITE_WS_URL=wss://api.yourdomain.com/ws
# VITE_NODE_ENV=production
# VITE_ENABLE_DEBUG_MODE=false
# VITE_USE_MOCK_DATA=false
</file>

<file path="frontend/Dockerfile">
# Multi-stage build for React frontend
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci --only=production && npm cache clean --force

# Development stage
FROM base AS development
WORKDIR /app

# Install all dependencies including dev dependencies
COPY package.json package-lock.json* ./
RUN npm ci

# Copy source code
COPY . .

# Expose port
EXPOSE 3000

# Set environment to development
ENV NODE_ENV=development

# Start development server
CMD ["npm", "run", "dev"]

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source
COPY . .

# Set build environment
ENV NODE_ENV=production

# Build the app
RUN npm run build

# Production stage
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk --no-cache add curl

# Copy built assets from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create nginx user and set permissions
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /usr/share/nginx/html && \
    chown -R nextjs:nodejs /var/cache/nginx && \
    chown -R nextjs:nodejs /var/log/nginx && \
    chown -R nextjs:nodejs /etc/nginx/conf.d

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
</file>

<file path="frontend/package.json">
{
  "name": "miasma-frontend",
  "version": "0.1.0",
  "type": "module",
  "description": "Personal Data Privacy Protection Service - Frontend",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --ext js,jsx --fix",
    "format": "prettier --write \"src/**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "type-check": "tsc --noEmit",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "coverage": "vitest --coverage"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.20.1",
    "@tanstack/react-query": "^5.8.4",
    "@tanstack/react-query-devtools": "^5.8.4",
    "axios": "^1.6.2",
    "clsx": "^2.0.0",
    "lucide-react": "^0.294.0",
    "react-hook-form": "^7.48.2",
    "react-hot-toast": "^2.4.1",
    "@hookform/resolvers": "^3.3.2",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@vitejs/plugin-react": "^4.1.1",
    "vite": "^5.0.0",
    "tailwindcss": "^3.3.6",
    "postcss": "^8.4.32",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.53.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "prettier": "^3.1.0",
    "prettier-plugin-tailwindcss": "^0.5.7",
    "vitest": "^1.0.0",
    "@testing-library/react": "^14.1.2",
    "@testing-library/jest-dom": "^6.1.5",
    "@testing-library/user-event": "^14.5.1",
    "jsdom": "^23.0.1"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  }
}
</file>

<file path="frontend/postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="frontend/src/App.jsx">
import { Routes, Route, Navigate } from 'react-router-dom'
import { useState, useEffect } from 'react'
import { Shield, Eye, Database, BarChart3 } from 'lucide-react'

// Import pages (we'll create these as placeholders)
import HomePage from './pages/HomePage'
import LoginPage from './pages/LoginPage'
import DashboardPage from './pages/DashboardPage'
import LookupPage from './pages/LookupPage'
import CampaignsPage from './pages/CampaignsPage'
import AnalyticsPage from './pages/AnalyticsPage'

// Import components
import Navbar from './components/common/Navbar'
import Sidebar from './components/common/Sidebar'
import LoadingSpinner from './components/common/LoadingSpinner'

// Import context/hooks (we'll create these)
import { AuthProvider, useAuth } from './contexts/AuthContext'

// Layout component for authenticated pages
function AuthenticatedLayout({ children }) {
  const [sidebarOpen, setSidebarOpen] = useState(false)
  
  return (
    <div className="flex h-screen bg-gray-950">
      {/* Sidebar */}
      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      
      {/* Main content area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top navbar */}
        <Navbar onMenuClick={() => setSidebarOpen(true)} />
        
        {/* Page content */}
        <main className="flex-1 overflow-y-auto p-6">
          {children}
        </main>
      </div>
    </div>
  )
}

// Protected route component
function ProtectedRoute({ children }) {
  const { user, isLoading } = useAuth()
  
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-950">
        <LoadingSpinner size="lg" />
      </div>
    )
  }
  
  if (!user) {
    return <Navigate to="/login" replace />
  }
  
  return <AuthenticatedLayout>{children}</AuthenticatedLayout>
}

// Public route (redirects to dashboard if authenticated)
function PublicRoute({ children }) {
  const { user, isLoading } = useAuth()
  
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-950">
        <LoadingSpinner size="lg" />
      </div>
    )
  }
  
  if (user) {
    return <Navigate to="/dashboard" replace />
  }
  
  return children
}

function App() {
  return (
    <AuthProvider>
      <div className="App">
        <Routes>
          {/* Public routes */}
          <Route 
            path="/" 
            element={
              <PublicRoute>
                <HomePage />
              </PublicRoute>
            } 
          />
          <Route 
            path="/login" 
            element={
              <PublicRoute>
                <LoginPage />
              </PublicRoute>
            } 
          />
          
          {/* Protected routes */}
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <DashboardPage />
              </ProtectedRoute>
            } 
          />
          <Route 
            path="/lookup" 
            element={
              <ProtectedRoute>
                <LookupPage />
              </ProtectedRoute>
            } 
          />
          <Route 
            path="/campaigns" 
            element={
              <ProtectedRoute>
                <CampaignsPage />
              </ProtectedRoute>
            } 
          />
          <Route 
            path="/analytics" 
            element={
              <ProtectedRoute>
                <AnalyticsPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Catch all route */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </div>
    </AuthProvider>
  )
}

export default App
</file>

<file path="frontend/src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom base styles */
@layer base {
  html {
    font-family: 'Inter', system-ui, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  body {
    @apply bg-gray-950 text-gray-100;
    /* Ensure full height and prevent horizontal overflow */
    min-height: 100vh;
    overflow-x: hidden;
  }
  
  /* Custom scrollbar for webkit browsers */
  ::-webkit-scrollbar {
    width: 6px;
  }
  
  ::-webkit-scrollbar-track {
    @apply bg-gray-900;
  }
  
  ::-webkit-scrollbar-thumb {
    @apply bg-gray-600 rounded-full;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-500;
  }
  
  /* Selection styles */
  ::selection {
    @apply bg-primary-600 text-white;
  }
  
  /* Focus styles for accessibility */
  :focus {
    outline: none;
  }
  
  :focus-visible {
    @apply ring-2 ring-primary-500 ring-offset-2 ring-offset-gray-950;
  }
}

/* Custom component styles */
@layer components {
  /* Button variants */
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-950 transition-all duration-200;
  }
  
  .btn-primary {
    @apply btn bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }
  
  .btn-secondary {
    @apply btn bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500;
  }
  
  .btn-outline {
    @apply btn border-gray-600 text-gray-300 hover:bg-gray-800 hover:text-white focus:ring-gray-500;
  }
  
  .btn-danger {
    @apply btn bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
  }
  
  .btn-sm {
    @apply px-3 py-1.5 text-xs;
  }
  
  .btn-lg {
    @apply px-6 py-3 text-base;
  }
  
  /* Card component */
  .card {
    @apply bg-gray-800 border border-gray-700 rounded-lg shadow-lg;
  }
  
  .card-header {
    @apply px-6 py-4 border-b border-gray-700;
  }
  
  .card-body {
    @apply p-6;
  }
  
  .card-footer {
    @apply px-6 py-4 border-t border-gray-700;
  }
  
  /* Form inputs */
  .input {
    @apply block w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-colors duration-200;
  }
  
  .input-error {
    @apply border-red-500 focus:ring-red-500;
  }
  
  .label {
    @apply block text-sm font-medium text-gray-300 mb-1;
  }
  
  .error-message {
    @apply text-red-400 text-sm mt-1;
  }
  
  /* Navigation */
  .nav-link {
    @apply flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200;
  }
  
  .nav-link-active {
    @apply nav-link bg-primary-600 text-white;
  }
  
  .nav-link-inactive {
    @apply nav-link text-gray-300 hover:bg-gray-700 hover:text-white;
  }
  
  /* Status indicators */
  .status-online {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800;
  }
  
  .status-offline {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800;
  }
  
  .status-pending {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800;
  }
  
  /* Loading spinner */
  .spinner {
    @apply animate-spin rounded-full border-2 border-gray-600 border-t-primary-500;
  }
  
  /* Glow effects for special elements */
  .glow {
    @apply shadow-glow;
  }
  
  .glow-lg {
    @apply shadow-glow-lg;
  }
  
  /* Code blocks */
  .code {
    @apply font-mono text-sm bg-gray-900 text-gray-100 px-2 py-1 rounded;
  }
  
  .code-block {
    @apply font-mono text-sm bg-gray-900 text-gray-100 p-4 rounded-lg border border-gray-700 overflow-x-auto;
  }
}

/* Utility classes */
@layer utilities {
  .text-gradient {
    @apply bg-gradient-to-r from-primary-400 to-primary-600 bg-clip-text text-transparent;
  }
  
  .bg-gradient {
    @apply bg-gradient-to-r from-primary-600 to-primary-800;
  }
  
  /* Animation utilities */
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }
  
  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }
  
  .animate-slide-down {
    animation: slideDown 0.3s ease-out;
  }
  
  /* Responsive text utilities */
  .text-responsive {
    @apply text-sm sm:text-base lg:text-lg;
  }
  
  /* Safe area utilities for mobile */
  .safe-top {
    padding-top: env(safe-area-inset-top);
  }
  
  .safe-bottom {
    padding-bottom: env(safe-area-inset-bottom);
  }
}
</file>

<file path="frontend/src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { Toaster } from 'react-hot-toast'

import App from './App.jsx'
import './index.css'

// Create a client for React Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
      retry: 2,
      refetchOnWindowFocus: false,
    },
    mutations: {
      retry: 1,
    },
  },
})

// Error boundary for development
const isDev = import.meta.env.DEV

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <QueryClientProvider client={queryClient}>
        <App />
        
        {/* Toast notifications */}
        <Toaster
          position="top-right"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#1f2937',
              color: '#f9fafb',
              border: '1px solid #374151',
            },
            success: {
              iconTheme: {
                primary: '#22c55e',
                secondary: '#f9fafb',
              },
            },
            error: {
              iconTheme: {
                primary: '#ef4444',
                secondary: '#f9fafb',
              },
            },
          }}
        />
        
        {/* React Query DevTools - only in development */}
        {isDev && <ReactQueryDevtools initialIsOpen={false} />}
      </QueryClientProvider>
    </BrowserRouter>
  </React.StrictMode>,
)
</file>

<file path="frontend/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        // Primary brand colors - dark theme focused
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
          950: '#082f49',
        },
        // Secondary colors for accents
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
          950: '#020617',
        },
        // Success/Error states
        success: {
          50: '#f0fdf4',
          500: '#22c55e',
          600: '#16a34a',
          700: '#15803d',
          900: '#14532d',
        },
        error: {
          50: '#fef2f2',
          500: '#ef4444',
          600: '#dc2626',
          700: '#b91c1c',
          900: '#7f1d1d',
        },
        warning: {
          50: '#fffbeb',
          500: '#f59e0b',
          600: '#d97706',
          700: '#b45309',
          900: '#78350f',
        },
        // Dark mode optimized grays
        gray: {
          50: '#f9fafb',
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
          900: '#111827',
          950: '#030712',
        },
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'Menlo', 'Monaco', 'Consolas', 'monospace'],
      },
      fontSize: {
        'xs': ['0.75rem', { lineHeight: '1rem' }],
        'sm': ['0.875rem', { lineHeight: '1.25rem' }],
        'base': ['1rem', { lineHeight: '1.5rem' }],
        'lg': ['1.125rem', { lineHeight: '1.75rem' }],
        'xl': ['1.25rem', { lineHeight: '1.75rem' }],
        '2xl': ['1.5rem', { lineHeight: '2rem' }],
        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
        '5xl': ['3rem', { lineHeight: '1' }],
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem',
      },
      boxShadow: {
        'glow': '0 0 20px rgba(14, 165, 233, 0.3)',
        'glow-lg': '0 0 30px rgba(14, 165, 233, 0.4)',
        'dark-lg': '0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2)',
      },
      backdropBlur: {
        xs: '2px',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'slide-down': 'slideDown 0.3s ease-out',
        'spin-slow': 'spin 3s linear infinite',
        'pulse-glow': 'pulseGlow 2s ease-in-out infinite alternate',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        slideDown: {
          '0%': { transform: 'translateY(-10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        pulseGlow: {
          '0%': { boxShadow: '0 0 20px rgba(14, 165, 233, 0.3)' },
          '100%': { boxShadow: '0 0 30px rgba(14, 165, 233, 0.6)' },
        },
      },
    },
  },
  plugins: [
    // Add any Tailwind plugins here
    // require('@tailwindcss/forms'),
    // require('@tailwindcss/typography'),
  ],
  darkMode: 'class', // Enable dark mode with class strategy
}
</file>

<file path="frontend/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    host: true, // Listen on all addresses (0.0.0.0)
    port: 3000,
    strictPort: true,
    watch: {
      usePolling: true, // Needed for Docker on some systems
    },
    hmr: {
      port: 3000,
    },
  },
  preview: {
    host: true,
    port: 3000,
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
          query: ['@tanstack/react-query'],
        },
      },
    },
  },
  define: {
    // Define global constants
    __APP_VERSION__: JSON.stringify(process.env.npm_package_version || '0.1.0'),
  },
  css: {
    devSourcemap: true,
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.js',
    css: true,
  },
})
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Jack Dolan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="readme.md">
# Miasma - Personal Data Poisoning Service

A defensive data poisoning platform that helps individuals protect their privacy by strategically introducing misleading information into commercial data broker networks.

## Project Goals

- **Privacy Protection**: Reduce the accuracy of personal data held by commercial data aggregators
- **Learning Platform**: Modern full-stack development with industry-standard tools and practices - using this as a learning side-project
- **Personal Use First**: Initially single-user (me), with potential for future expansion

## Tech Stack

### Frontend
- **React 18** - Modern component-based UI
- **Tailwind CSS** - Utility-first styling
- **Vite** - Fast build tool and dev server
- **React Query** - Server state management

### Backend
- **Python 3.11** - Core language
- **FastAPI** - High-performance async web framework
- **PostgreSQL** - Primary database for campaigns and results
- **Redis** - Caching and session management
- **SQLAlchemy** - ORM with async support

### Data Collection & Processing
- **Selenium** - Web automation and scraping
- **BeautifulSoup4** - HTML parsing, plus the website art is pretty
- **Requests** - HTTP client for APIs
- **Pandas** - Data manipulation and analysis

### Infrastructure & DevOps
- **Docker** - Containerization
- **Docker Compose** - Local development environment
- **AWS ECS** - Container orchestration
- **AWS RDS** - Managed PostgreSQL
- **AWS ElastiCache** - Managed Redis
- **GitHub Actions** - CI/CD pipeline
- **Snyk** - Security vulnerability scanning

## Architecture Overview

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   React SPA     │────│   FastAPI       │────│   PostgreSQL    │
│   (Frontend)    │    │   (Backend)     │    │   (Database)    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                              │
                       ┌──────┴──────┐
                       │    Redis    │
                       │  (Caching)  │
                       └─────────────┘
```

## Features (Planned)

### Phase 1: Core Infrastructure
- [ ] User authentication and profile management
- [ ] Data source discovery and monitoring
- [ ] Basic web scraping for personal data lookup

### Phase 2: Intelligence Gathering
- [ ] Automated scanning of major data broker sites
- [ ] Data source mapping and classification
- [ ] Personal data inventory and tracking

### Phase 3: Data Injection
- [ ] Fictitious data generation algorithms
- [ ] Automated form submission system
- [ ] Campaign management and tracking

### Phase 4: Verification & Analytics
- [ ] Success rate monitoring
- [ ] Data propagation tracking
- [ ] Effectiveness analytics dashboard

## Privacy & Legal Considerations

- **Scope Limitation**: Only targets commercial data brokers and voluntary submission sites
- **Government Exclusion**: Explicitly avoids interaction with official government sources
- **Personal Use**: Designed for individuals protecting their own data
- **Compliance**: Respects terms of service and applicable laws

## Quick Start

```bash
# Clone the repository
git clone https://github.com/jack-dolan/miasma.git
cd miasma

# Start development environment
docker-compose up -d

# Frontend development
cd frontend
npm install
npm run dev

# Backend development
cd backend
pip install -r requirements.txt
uvicorn main:app --reload
```

## Development Workflow

1. **Feature Branch**: Create feature branches from `main`
2. **Development**: Use Docker Compose for local development
3. **Testing**: Automated testing with pytest and Jest
4. **Security**: Snyk scanning in CI pipeline
5. **Deployment**: Automated deployment to AWS via GitHub Actions

## Disclaimer

This tool is designed for legitimate privacy protection purposes. Users are responsible for ensuring their use complies with all applicable laws and terms of service.
</file>

</files>
